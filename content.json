{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"Mysql事务的四大特性","date":"2020-11-05T07:20:34.000Z","updated":"2020-11-10T08:34:18.090Z","comments":true,"path":"categories/Mysql事务的四大特性.html","permalink":"http://example.com/categories/Mysql%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7.html","excerpt":"","text":"简介 事务的四大特性ACID12345678* 原子性Atomicity： 一个事务必须被事务不可分割的最小工作单元，整个操作要么全部成功，要么全部失败，一般就是通过commit和rollback来控制* 一致性Consistency: 数据库总能从一个一致性的状态转换到另一个一致性的状态，比如小滴课堂下单支付成功后，开通视频播放权限，只要有任何一方发生异常就不会成功提交事务* 隔离性Isolation: 一个事务相对于另一个事务是隔离的，一个事务所做的修改是在最终提交以前，对其他事务是不可见的 * 持久性Durability: 一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失"},{"title":"Mysql数据库索引","date":"2020-11-05T07:20:34.000Z","updated":"2020-11-10T08:34:18.017Z","comments":true,"path":"categories/Mysql数据库索引.html","permalink":"http://example.com/categories/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95.html","excerpt":"","text":"索引名称 特点 创建语句 普通索引 最基本的索引,仅加速查询 REATE INDEX idx_name ON table_name(filed_name) 唯一索引 加速查询，列值唯一，允许为空; 组合索引则列值的组合必须唯一 CREATE UNIQUE INDEX idx_name ON table_name(filed_name_1,filed_name_2) 主键索引 加速查询，列值唯一,一个表只有1个，不允许有空值 ALTER TABLE table_name ADD PRIMARY KEY ( filed_name ) 组合索引 加速查询，多条件组合查询 CREATE INDEX idx_name ON table_name(filed_name_1,filed_name_2); 覆盖索引 索引包含所需要的值，不需要“回表”查询， 比如查询 两个字段，刚好是 组合索引 的两个字段 全文索引 对内容进行分词搜索，仅可用于Myisam， 更多用ElasticSearch做搜索 ALTER TABLE table_name ADD FULLTEXT ( filed_name )"},{"title":"Mysql的存储引擎","date":"2020-11-05T07:20:34.000Z","updated":"2020-11-10T08:34:18.054Z","comments":true,"path":"categories/Mysql的存储引擎.html","permalink":"http://example.com/categories/Mysql%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html","excerpt":"","text":"简介: Mysql常见的存储引擎，新版Mysql默认是哪个123常见的有多类，InnoDB、MyISAM、MEMORY、MERGE、ARCHIVE、CSV等一般比较常用的有InnoDB、MyISAMMySQL 5.5以上的版本默认是InnoDB，5.5之前默认存储引擎是MyISAM"},{"title":"categories","date":"2020-11-10T08:09:15.000Z","updated":"2020-11-10T08:43:17.265Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"Mysql的存储引擎","date":"2020-11-05T07:20:34.000Z","updated":"2020-11-10T08:34:25.734Z","comments":true,"path":"tags/Mysql的存储引擎.html","permalink":"http://example.com/tags/Mysql%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html","excerpt":"","text":"简介: Mysql常见的存储引擎，新版Mysql默认是哪个123常见的有多类，InnoDB、MyISAM、MEMORY、MERGE、ARCHIVE、CSV等一般比较常用的有InnoDB、MyISAMMySQL 5.5以上的版本默认是InnoDB，5.5之前默认存储引擎是MyISAM"},{"title":"gitbook安装","date":"2020-11-05T07:20:34.000Z","updated":"2020-11-10T08:34:25.703Z","comments":true,"path":"tags/gitbook安装.html","permalink":"http://example.com/tags/gitbook%E5%AE%89%E8%A3%85.html","excerpt":"","text":"###通过NPM安装安装 GitBook 的最好办法是通过 NPM。在终端提示符下，只需运行以下命令即可安装 GitBook： 1npm install gitbook-cli -g gitbook-cli是 GitBook 的一个命令行工具。它将自动安装所需版本的 GitBook 来构建一本书.执行下面的命令，查看 GitBook 版本，以验证安装成功。 1gitbook -V ###初始化GitBook可以设置一个样板书： 1gitbook init // 安装时间有时候比较长 请耐心等待 如果您希望将书籍创建到一个新目录中，可以通过运行 gitbook init ./directory 这样做 ###构建使用下面的命令，会在项目的目录下生成一个 _book 目录，里面的内容为静态站点的资源文件： 1gitbook build ###Debugging您可以使用选项 –log=debug 和 –debug 来获取更好的错误消息（使用堆栈跟踪）。例如： 1gitbook build ./ --log=debug --debug ###启动服务使用下列命令会运行一个 web 服务, 通过 http://localhost:4000/ 可以预览书籍 1gitbook serve ###GitBook 命令列出 gitbook 所有的命令 1gitbook help 生成静态网页 1gitbook build 生成静态网页并运行服务器 1gitbook serve 生成时指定gitbook的版本, 本地没有会先下载 1gitbook build --gitbook=2.0.1 列出本地所有的gitbook版本 1gitbook ls 列出远程可用的gitbook版本 1gitbook ls-remote 安装对应的gitbook版本 1gitbook fetch 标签/版本号 更新到gitbook的最新版本 1gitbook update 卸载对应的gitbook版本 1gitbook uninstall 2.0.1 指定log的级别 1gitbook build --log=debug 输出错误信息 1gitbook builid --debug ###官方资源Markdown基本语法Gitbook Github Gitbook 官网 Gitbook Toolchain 文档 Gitbook 帮助中心"},{"title":"gitlab配置域名访问","date":"2020-11-06T07:55:30.000Z","updated":"2020-11-10T08:34:25.640Z","comments":true,"path":"tags/gitlab配置域名访问.html","permalink":"http://example.com/tags/gitlab%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE.html","excerpt":"","text":"安装Gitlab完成后：安装Gitlab完成后：Gitlab默认Nginx80端口如果机器未占有80端口，可以直接替换成域名，解析后就可以直接访问12345grep &quot;^external_url&quot; &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb #查看当前绑定的域名或者IPvim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb #打开配置文件# external_url &#39;http:&#x2F;&#x2F;192.168.174.131&#39; #替换 #修改成域名访问external_url &#39;http:&#x2F;&#x2F;gitlab.inewmaker.com&#39; gitlab-ctl reconfigure #重新跑一下配置 如果机器80端口以占有，需要修改gitlab端口 grep \"'listen_port\" /etc/gitlab/gitlab.rb #查看默认端口 vim /etc/gitlab/gitlab.rb #打开配置文件 nginx['listen_port'] = 800 #找到取消注释，修改端口 gitlab-ctl reconfigure #重新跑一下配置"},{"title":"tags","date":"2020-11-10T08:10:05.000Z","updated":"2020-11-10T08:41:57.292Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"Centos7.4Gitlab搭建","date":"2020-11-10T05:58:21.442Z","updated":"2020-11-10T05:58:21.442Z","comments":true,"path":"2020/11/10/Centos7.4Gitlab搭建/","link":"","permalink":"http://example.com/2020/11/10/Centos7.4Gitlab%E6%90%AD%E5%BB%BA/","excerpt":"","text":"Gitlab服务器搭建步骤服务器: 教程是基于Centos7.4 64位 双核4GB内存 服务器购买后记得配置安全组 默认的80端口要添加进去 域名: 域名可以自己申请(需要备案等时间较长,但是域名可以根据自己需要的样式申请 (http://www.gitxxxx.com) 直接购买 拿到域名之后记得设置DNS解析 Gitlab搭建:1.安装依赖 1234yum install curl policycoreutils openssh-server openssh-clientsservice sshd restartyum install postfixservice postfix restart 2.开始安装 /etc/yum.repos.d下面创建文件gitlab-ce.repo gitlab-ce.repo内容如下: 12345[gitlab-ce]name&#x3D;Gitlab CE Repositorybaseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;gitlab-ce&#x2F;yum&#x2F;el$releasever&#x2F;gpgcheck&#x3D;0enabled&#x3D;1 上面的操作是使用镜像提高下载安装的速度，继续回到命令行： 12yum makecacheyum install gitlab-ce 如果上述安装方法未能成功，可以直接去官网下载rpm安装包 https://packages.gitlab.com/gitlab/gitlab-ce?filter=rpms&amp;page=1 下载后使用 rpm -ivh gitlabe-ce-10…….进行安装 3.配置URL 方法一 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960修改配置文件 /etc/gitlab/gitlab.rbexternal_url = &#x27;http://xxx.xxx.xxx.xxx&#x27;默认使用的是80端口如果是其它端口:&#x27;http://xxx.xxx.xxx.xxx:99123’保存退出回到命令行执行gitlab-ctl reconfigure关于邮件:/etc/gitlab/gitlab.rb里面最下面添加配置:QQ邮箱配置:gitlab_rails[&#x27;smtp_enable&#x27;] = truegitlab_rails[&#x27;smtp_address&#x27;] = &quot;smtp.qq.com&quot;gitlab_rails[&#x27;smtp_port&#x27;] = 465gitlab_rails[&#x27;smtp_user_name&#x27;] = &quot;xxxxx@qq.com&quot;gitlab_rails[&#x27;smtp_password&#x27;] = &quot;授权码 去邮箱里面账户安全里面开启后获取&quot;gitlab_rails[&#x27;smtp_domain&#x27;] = &quot;smtp.qq.com&quot;gitlab_rails[&#x27;smtp_authentication&#x27;] = &quot;login&quot;gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = truegitlab_rails[&#x27;smtp_tls&#x27;] = truegitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;xxxxx@qq.com&#x27;要和上面的邮箱一样163邮箱配置:gitlab_rails[&#x27;smtp_enable&#x27;] = truegitlab_rails[&#x27;smtp_address&#x27;] = &quot;smtp.163.com&quot;gitlab_rails[&#x27;smtp_port&#x27;] = 465gitlab_rails[&#x27;smtp_user_name&#x27;] = &quot;xxxx@163.com&quot; gitlab_rails[&#x27;smtp_password&#x27;] = &quot;授权码&quot;gitlab_rails[&#x27;smtp_domain&#x27;] = &quot;smtp.163.com&quot;gitlab_rails[&#x27;smtp_authentication&#x27;] = &quot;login&quot;gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = truegitlab_rails[&#x27;smtp_tls&#x27;] = true gitlab_rails[&#x27;gitlab_email_from&#x27;] = &quot;xxxx@163.com&quot;要和上面的邮箱一样其它邮箱请参考:https://docs.gitlab.com/omnibus/settings/smtp.html常用命令:gitlab-ctl status 查看状态gitlab-ctl tail 查看所有日志gitlab-ctl tail nginx/gitlab_access.log 查看nginx访问日志gitlab-ctl tail unicorn 跟踪unicorn的状态一些目录结构:主配置文件：/etc/gitlab/gitlab.rb 可以自定义一些邮件服务等日志地址：/var/log/gitlab 对应各服务的打印日志服务地址：/var/opt/gitlab 对应各服务的主目录仓库地址：/var/opt/gitlab/git-data 记录项目仓库等提交信息重置配置：gitlab-ctl reconfigure 不要乱用，会重置为最原始的配置的重启服务：gitlab-ctl stop/start/restart/uninstall 停止、启动、重启、卸载默认安装：postgres、nginx、redis、unicorn ……关于漏洞:kernel security updategnutls security, bug fix, and enhancement update修复命令:yum update kernelkernel-develkernel-headersreboot修复完返回到浏览器验证该漏洞 方法二 1通过阿里云服务器开放端口直接访问 ###使用方法 Gitlab重置root密码 12345cd &#x2F;opt&#x2F;gitlab&#x2F;bingitlab-rails console productionu.password&#x3D;&#39;12345678’ &#x2F;&#x2F; 密码u.password_confirmation&#x3D;&#39;12345678&#39; &#x2F;&#x2F; 确定密码 启动服务 12gitlab-ce start 关闭服务 123gitlab-ctlstop unicorngitlab-ctlstop sidekiqgitlab-ctlstop nginx","categories":[],"tags":[]},{"title":"sss","slug":"sss","date":"2020-11-10T05:53:36.000Z","updated":"2020-11-10T05:53:36.435Z","comments":true,"path":"2020/11/10/sss/","link":"","permalink":"http://example.com/2020/11/10/sss/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-11-10T05:45:33.448Z","updated":"2020-11-10T05:45:33.448Z","comments":true,"path":"2020/11/10/hello-world/","link":"","permalink":"http://example.com/2020/11/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"gitlab配置域名访问","slug":"gitlab配置域名访问","date":"2020-11-06T07:55:30.000Z","updated":"2020-11-10T05:58:21.442Z","comments":true,"path":"2020/11/06/gitlab配置域名访问/","link":"","permalink":"http://example.com/2020/11/06/gitlab%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/","excerpt":"","text":"安装Gitlab完成后：安装Gitlab完成后：Gitlab默认Nginx80端口如果机器未占有80端口，可以直接替换成域名，解析后就可以直接访问12345grep &quot;^external_url&quot; &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb #查看当前绑定的域名或者IPvim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb #打开配置文件# external_url &#39;http:&#x2F;&#x2F;192.168.174.131&#39; #替换 #修改成域名访问external_url &#39;http:&#x2F;&#x2F;gitlab.inewmaker.com&#39; gitlab-ctl reconfigure #重新跑一下配置 如果机器80端口以占有，需要修改gitlab端口 grep \"'listen_port\" /etc/gitlab/gitlab.rb #查看默认端口 vim /etc/gitlab/gitlab.rb #打开配置文件 nginx['listen_port'] = 800 #找到取消注释，修改端口 gitlab-ctl reconfigure #重新跑一下配置","categories":[],"tags":[]},{"title":"Mysql事务的四大特性","slug":"Mysql事务的四大特性","date":"2020-11-05T07:20:34.000Z","updated":"2020-11-10T05:58:21.503Z","comments":true,"path":"2020/11/05/Mysql事务的四大特性/","link":"","permalink":"http://example.com/2020/11/05/Mysql%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/","excerpt":"","text":"简介 事务的四大特性ACID12345678* 原子性Atomicity： 一个事务必须被事务不可分割的最小工作单元，整个操作要么全部成功，要么全部失败，一般就是通过commit和rollback来控制* 一致性Consistency: 数据库总能从一个一致性的状态转换到另一个一致性的状态，比如小滴课堂下单支付成功后，开通视频播放权限，只要有任何一方发生异常就不会成功提交事务* 隔离性Isolation: 一个事务相对于另一个事务是隔离的，一个事务所做的修改是在最终提交以前，对其他事务是不可见的 * 持久性Durability: 一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失","categories":[],"tags":[]},{"title":"Mysql数据库索引","slug":"Mysql数据库索引","date":"2020-11-05T07:20:34.000Z","updated":"2020-11-10T05:58:21.450Z","comments":true,"path":"2020/11/05/Mysql数据库索引/","link":"","permalink":"http://example.com/2020/11/05/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95/","excerpt":"","text":"索引名称 特点 创建语句 普通索引 最基本的索引,仅加速查询 REATE INDEX idx_name ON table_name(filed_name) 唯一索引 加速查询，列值唯一，允许为空; 组合索引则列值的组合必须唯一 CREATE UNIQUE INDEX idx_name ON table_name(filed_name_1,filed_name_2) 主键索引 加速查询，列值唯一,一个表只有1个，不允许有空值 ALTER TABLE table_name ADD PRIMARY KEY ( filed_name ) 组合索引 加速查询，多条件组合查询 CREATE INDEX idx_name ON table_name(filed_name_1,filed_name_2); 覆盖索引 索引包含所需要的值，不需要“回表”查询， 比如查询 两个字段，刚好是 组合索引 的两个字段 全文索引 对内容进行分词搜索，仅可用于Myisam， 更多用ElasticSearch做搜索 ALTER TABLE table_name ADD FULLTEXT ( filed_name )","categories":[],"tags":[]},{"title":"Mysql的存储引擎","slug":"Mysql的存储引擎","date":"2020-11-05T07:20:34.000Z","updated":"2020-11-10T05:58:21.488Z","comments":true,"path":"2020/11/05/Mysql的存储引擎/","link":"","permalink":"http://example.com/2020/11/05/Mysql%E7%9A%84%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/","excerpt":"","text":"简介: Mysql常见的存储引擎，新版Mysql默认是哪个123常见的有多类，InnoDB、MyISAM、MEMORY、MERGE、ARCHIVE、CSV等一般比较常用的有InnoDB、MyISAMMySQL 5.5以上的版本默认是InnoDB，5.5之前默认存储引擎是MyISAM","categories":[],"tags":[]},{"title":"gitbook安装","slug":"gitbook安装","date":"2020-11-05T07:20:34.000Z","updated":"2020-11-10T05:58:21.442Z","comments":true,"path":"2020/11/05/gitbook安装/","link":"","permalink":"http://example.com/2020/11/05/gitbook%E5%AE%89%E8%A3%85/","excerpt":"","text":"###通过NPM安装安装 GitBook 的最好办法是通过 NPM。在终端提示符下，只需运行以下命令即可安装 GitBook： 1npm install gitbook-cli -g gitbook-cli是 GitBook 的一个命令行工具。它将自动安装所需版本的 GitBook 来构建一本书.执行下面的命令，查看 GitBook 版本，以验证安装成功。 1gitbook -V ###初始化GitBook可以设置一个样板书： 1gitbook init // 安装时间有时候比较长 请耐心等待 如果您希望将书籍创建到一个新目录中，可以通过运行 gitbook init ./directory 这样做 ###构建使用下面的命令，会在项目的目录下生成一个 _book 目录，里面的内容为静态站点的资源文件： 1gitbook build ###Debugging您可以使用选项 –log=debug 和 –debug 来获取更好的错误消息（使用堆栈跟踪）。例如： 1gitbook build ./ --log=debug --debug ###启动服务使用下列命令会运行一个 web 服务, 通过 http://localhost:4000/ 可以预览书籍 1gitbook serve ###GitBook 命令列出 gitbook 所有的命令 1gitbook help 生成静态网页 1gitbook build 生成静态网页并运行服务器 1gitbook serve 生成时指定gitbook的版本, 本地没有会先下载 1gitbook build --gitbook=2.0.1 列出本地所有的gitbook版本 1gitbook ls 列出远程可用的gitbook版本 1gitbook ls-remote 安装对应的gitbook版本 1gitbook fetch 标签/版本号 更新到gitbook的最新版本 1gitbook update 卸载对应的gitbook版本 1gitbook uninstall 2.0.1 指定log的级别 1gitbook build --log=debug 输出错误信息 1gitbook builid --debug ###官方资源Markdown基本语法Gitbook Github Gitbook 官网 Gitbook Toolchain 文档 Gitbook 帮助中心","categories":[],"tags":[]},{"title":"私有npm搭建教程","slug":"私有npm搭建教程","date":"2020-11-05T07:20:34.000Z","updated":"2020-11-10T05:58:21.450Z","comments":true,"path":"2020/11/05/私有npm搭建教程/","link":"","permalink":"http://example.com/2020/11/05/%E7%A7%81%E6%9C%89npm%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/","excerpt":"","text":"安装与启动1. 全局安装verdaccio123// 加上--unsafe-perm选项是为了防止gyp ERR! permission denied权限问题报错npm install --global verdaccio --unsafe-perm// 对于 verdaccio@4.0.0-alpha.x 或 verdaccio@4.x版本， Node 8.x (LTS &quot;Carbon&quot;) 是最低支持版本, 建议安装nvm进行node版的切换。 2. 全局安装pm21npm install --global pm2 如果安装失败，可以尝试 npm cache clean -f 后重新安装。 3. 启动verdaccio12pm2 start verdacciopm2 log verdaccio // 或者使用 pm2 log 对应的id 12345// 表示启动成功, 打开 http://localhost:4873 可以看到页面。0|verdacci | warn --- config file - /Users/jinbiao/.config/verdaccio/config.yaml0|verdacci | warn --- Plugin successfully loaded: verdaccio-htpasswd0|verdacci | warn --- Plugin successfully loaded: verdaccio-audit0|verdacci | warn --- http address - http://localhost:4873/ - verdaccio/4.1.0 4. 配置config.yaml1234logs: - &#123; type: stdout, format: pretty, level: http &#125; #- &#123;type: file, path: verdaccio.log, level: info&#125;listen: 0.0.0.0:4873 // 在文件最后，添加listen这一行 表示可以通过外网访问 1pm2 restart verdaccio // 或者使用 pm2 restart 对应的id verdaccio配置1.默认配置如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# #号后面是注释# 所有包的缓存目录storage: ./storage# 插件目录plugins: ./plugins#开启web 服务,能够通过web 访问web: # WebUI is enabled as default, if you want disable it, just uncomment this line #enable: false title: Verdaccio#验证信息auth: htpasswd: # 用户信息存储目录 file: ./htpasswd # Maximum amount of users allowed to register, defaults to &quot;+inf&quot;. # You can set this to -1 to disable registration. #max_users: 1000# a list of other known repositories we can talk to#公有仓库配置uplinks: npmjs: url: https://registry.npmjs.org/packages: &#x27;@*/*&#x27;: # scoped packages access: $all publish: $authenticated #代理 表示没有的仓库会去这个npmjs 里面去找 , #npmjs 又指向 https://registry.npmjs.org/ ,就是上面的 uplinks 配置 proxy: npmjs &#x27;**&#x27;: # 三种身份,所有人,匿名用户,认证(登陆)用户 # &quot;$all&quot;, &quot;$anonymous&quot;, &quot;$authenticated&quot; #是否可访问所需要的权限 access: $all #发布package 的权限 publish: $authenticated # 如果package 不存在,就向代理的上游服务发起请求 proxy: npmjs# To use `npm audit` uncomment the following sectionmiddlewares: audit: enabled: true# 监听的端口，IP,重点,不配置这个,只能本机能访问listen: 0.0.0.0:4873# log settingslogs: - &#123;type: stdout, format: pretty, level: http&#125; #- &#123;type: file, path: verdaccio.log, level: info&#125; 2.缓存，上游，及更新原理1234567891011121314151617181920212223242526uplinks: someRegisry: url: http://172.18.128.218:4873/packages: &#x27;@*/*&#x27;: # scoped packages access: $all publish: $authenticated #代理 表示没有的仓库会去这个 someRegisry 里面去找 , #someRegisry 又指向 http://172.18.128.218:4873/ ,就是上面的 uplinks 配置 proxy: someRegisry &#x27;**&#x27;: # 三种身份,所有人,匿名用户,认证(登陆)用户 # &quot;$all&quot;, &quot;$anonymous&quot;, &quot;$authenticated&quot; #是否可访问所需要的权限 access: $all #发布package 的权限 publish: $authenticated # 如果package 不存在,就向代理的上游服务发起请求 proxy: npmjs 上图表示verdaccio先去上游地址请求到了包，然后把包返回给客户端，并且缓存了.tgz压缩包。 存到了 ~/.config/verdaccio/storage 之中 上图表示第二次还是请求这个模块的时候，verdaccio会去上游查找，并且和本地缓存对比，发现没有区别，所有直接从缓存返回。 上图表示，上游模块发生了更新，所以继续到上游地址请求包，然后把包返回给客户端，并且缓存了.tgz压缩包。 verdaccio官方文档","categories":[],"tags":[]}],"categories":[],"tags":[]}